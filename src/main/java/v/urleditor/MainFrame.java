/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package v.urleditor;

import Data.InfoData;
import Data.InfoSer;
import Data.SQL;
import Data.URL;
import Data.URLContent;
import Data.URLSet;
import java.awt.Desktop;
import java.awt.Dimension;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.util.Date;
import java.util.LinkedList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author vince
 */
public class MainFrame extends javax.swing.JFrame {
    public SQL sql;
    public String page;
    public LinkedList<URL> urlList;
    public LinkedList<URLContent> urlContentList;
    private int tempURLContentID = -1;
    private InfoSer infoSer;
    private boolean confirm = false;
    
    String ip;
    int port;
    String username;
    String password;
    String schema;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() 
    {
        infoSer = new InfoSer("data");
        initComponents();
        updatePreset();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        presetComboBox = new javax.swing.JComboBox<>();
        testConnectionButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        URLListBox = new javax.swing.JList<>();
        updateURLPageButton = new javax.swing.JButton();
        IPTextBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        PortTextBox = new javax.swing.JTextField();
        UsernameTextBox = new javax.swing.JTextField();
        PasswordTextBox = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        URLContentListBox = new javax.swing.JList<>();
        URLTextBox = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        viewOrEditButton = new javax.swing.JButton();
        newURLButton = new javax.swing.JButton();
        nameTextBox = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        replaceURLTextBox = new javax.swing.JTextField();
        changeURLButton = new javax.swing.JButton();
        viewOrEditButton1 = new javax.swing.JButton();
        newURLContentButton = new javax.swing.JButton();
        deleteURLContentButton = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        SchemaTextBox = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        savePresetButton = new javax.swing.JButton();
        deletePresetButton = new javax.swing.JButton();
        protectedCheckBox = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        userGroupTextBox = new javax.swing.JTextField();
        saveSettingButton = new javax.swing.JButton();
        AutoSortButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        viewOrEditTextArea = new javax.swing.JTextArea();
        saveToSqlButton = new javax.swing.JButton();
        htmlViewButton = new javax.swing.JButton();
        viewOrEditLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        debugTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("URL Editor");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        presetComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        presetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 1", "Item 1", "Item 1" }));
        presetComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetComboBoxActionPerformed(evt);
            }
        });

        testConnectionButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        testConnectionButton.setText("TestConnection");

        URLListBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        URLListBox.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Please Update URL page" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        URLListBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                URLListBoxMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(URLListBox);

        updateURLPageButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        updateURLPageButton.setText("Update URL page");
        updateURLPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateURLPageButtonActionPerformed(evt);
            }
        });

        IPTextBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        IPTextBox.setName(""); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("---------------------------------------------------------------------------------------------------------------------------------SQL---------------------------------------------------------------------------------------------------------------------------------------------");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("IP");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Port");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Username");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Password");

        PortTextBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        UsernameTextBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        PasswordTextBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        URLContentListBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jScrollPane2.setViewportView(URLContentListBox);

        URLTextBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        URLTextBox.setText("/");
        URLTextBox.setName(""); // NOI18N
        URLTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                URLTextBoxKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("URL:Port");

        viewOrEditButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewOrEditButton.setText("View/Edit URL content");
        viewOrEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrEditButtonActionPerformed(evt);
            }
        });

        newURLButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        newURLButton.setText("New URL");
        newURLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newURLButtonActionPerformed(evt);
            }
        });

        nameTextBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nameTextBox.setText("name");
        nameTextBox.setName(""); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Replace:");

        replaceURLTextBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        replaceURLTextBox.setText("/");
        replaceURLTextBox.setName(""); // NOI18N

        changeURLButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        changeURLButton.setText("Change URL");
        changeURLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeURLButtonActionPerformed(evt);
            }
        });

        viewOrEditButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewOrEditButton1.setText("Delete selected URL and it contents");
        viewOrEditButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrEditButton1ActionPerformed(evt);
            }
        });

        newURLContentButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        newURLContentButton.setText("New URL content");
        newURLContentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newURLContentButtonActionPerformed(evt);
            }
        });

        deleteURLContentButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteURLContentButton.setText("Delete Selected URL content");
        deleteURLContentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteURLContentButtonActionPerformed(evt);
            }
        });

        moveUpButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        moveUpButton.setText("Move up");
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveDownButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        moveDownButton.setText("Move Down");
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Schema");

        SchemaTextBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Preset");

        savePresetButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        savePresetButton.setText("Save current preset");
        savePresetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePresetButtonActionPerformed(evt);
            }
        });

        deletePresetButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deletePresetButton.setText("Delete Selected Preset");
        deletePresetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePresetButtonActionPerformed(evt);
            }
        });

        protectedCheckBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        protectedCheckBox.setText("protected");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("    Name");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText(", user_group");

        userGroupTextBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        userGroupTextBox.setText("user");
        userGroupTextBox.setName(""); // NOI18N

        saveSettingButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        saveSettingButton.setText("change Setting");
        saveSettingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingButtonActionPerformed(evt);
            }
        });

        AutoSortButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        AutoSortButton.setText("Auto sort everything");
        AutoSortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoSortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IPTextBox))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SchemaTextBox)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(PortTextBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UsernameTextBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PasswordTextBox))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(presetComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(savePresetButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deletePresetButton))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(replaceURLTextBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeURLButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(nameTextBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(protectedCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userGroupTextBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveSettingButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(URLTextBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(newURLButton))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(testConnectionButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateURLPageButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(viewOrEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(newURLContentButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deleteURLContentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(moveDownButton)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(moveUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(AutoSortButton)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewOrEditButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IPTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(PortTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(UsernameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(PasswordTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(SchemaTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(presetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(savePresetButton)
                    .addComponent(deletePresetButton))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testConnectionButton)
                    .addComponent(updateURLPageButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(URLTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newURLButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(protectedCheckBox)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(userGroupTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveSettingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(replaceURLTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeURLButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewOrEditButton)
                    .addComponent(viewOrEditButton1)
                    .addComponent(moveUpButton)
                    .addComponent(AutoSortButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newURLContentButton)
                    .addComponent(deleteURLContentButton)
                    .addComponent(moveDownButton))
                .addContainerGap())
        );

        testConnectionButton.getAccessibleContext().setAccessibleDescription("");

        mainTabbedPane.addTab("Main Menu", jPanel1);

        viewOrEditTextArea.setColumns(20);
        viewOrEditTextArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        viewOrEditTextArea.setRows(5);
        jScrollPane3.setViewportView(viewOrEditTextArea);

        saveToSqlButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        saveToSqlButton.setText("Save to sql");
        saveToSqlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToSqlButtonActionPerformed(evt);
            }
        });

        htmlViewButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        htmlViewButton.setText("view as index.html");
        htmlViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htmlViewButtonActionPerformed(evt);
            }
        });

        viewOrEditLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        viewOrEditLabel.setText("...");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(saveToSqlButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(htmlViewButton)
                        .addGap(0, 1071, Short.MAX_VALUE))
                    .addComponent(viewOrEditLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(viewOrEditLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveToSqlButton)
                    .addComponent(htmlViewButton))
                .addContainerGap())
        );

        mainTabbedPane.addTab("View/Edit", jPanel2);

        debugTextArea.setColumns(20);
        debugTextArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        debugTextArea.setRows(5);
        jScrollPane4.setViewportView(debugTextArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1375, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("Debug", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabbedPane)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void htmlViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlViewButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            File file = new File("index.html");
            file.delete();
            file.createNewFile();
            FileWriter myWriter = new FileWriter("index.html");
            myWriter.write(viewOrEditTextArea.getText());
            myWriter.close();
            Desktop.getDesktop().browse(file.toURI());
        }
        catch (Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }//GEN-LAST:event_htmlViewButtonActionPerformed

    private void saveToSqlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToSqlButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            if(tempURLContentID != -1)
            {
                String content = viewOrEditTextArea.getText();
                content = content.replaceAll("\'", "\\\\" + "\'");
                    content = content.replaceAll("\"", "\\\\" + "\"");

                    sql.executeUpdate(String.format("UPDATE `%s`.`URL_content` SET `content` = '%s' WHERE (`id` = '%s');", schema, content, tempURLContentID));

                    viewOrEditTextArea.setText("");

                    mainTabbedPane.setSelectedIndex(0);

                }

                tempURLContentID = -1;
                viewOrEditLabel.setText("");

                sql.closeConnection();
            }
            catch(Exception ex)
            {
                printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
            }
    }//GEN-LAST:event_saveToSqlButtonActionPerformed

    private void AutoSortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoSortButtonActionPerformed
        // TODO add your handling code here:
        autoShortURL();
        getAllURL();
        updateURLList();
    }//GEN-LAST:event_AutoSortButtonActionPerformed

    private void saveSettingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            String url = URLTextBox.getText();
            String name = nameTextBox.getText();
            int protected_resources = protectedCheckBox.isSelected() ? 1 : 0;
            String userGroup = userGroupTextBox.getText();
            int id = -1;

            if(url.charAt(0) != '/')
            return;

            getAllURL();

            for(int count = 0; count < urlList.size(); count++)
            {
                if(urlList.get(count).path.compareTo(url) == 0)
                {
                    id = urlList.get(count).id;
                    break;
                }
            }

            sql.executeUpdate(String.format("UPDATE `%s`.`URL` SET `name` = '%s', `protected` = '%s', `user_group` = '%s' WHERE (`id` = '%s');", schema, name, protected_resources, userGroup, id));

            getAllURL();
            updateURLList();

            sql.closeConnection();
        }
        catch(Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }//GEN-LAST:event_saveSettingButtonActionPerformed

    private void deletePresetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePresetButtonActionPerformed
        try
        {
            // TODO add your handling code here:
            int index = presetComboBox.getSelectedIndex() - 1;
            if(index < 0)
            return;

            infoSer.list.remove(index);
            infoSer.serialize("data");
            updatePreset();
        }
        catch (IOException ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }//GEN-LAST:event_deletePresetButtonActionPerformed

    private void savePresetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePresetButtonActionPerformed
        try
        {
            // TODO add your handling code here:
            getAllPreset();
            infoSer.list.add(new InfoData(ip, port, username, password, schema));
            infoSer.serialize("data");
            updatePreset();
        }
        catch (IOException ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }//GEN-LAST:event_savePresetButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        // TODO add your handling code here:
        String urlContent = URLContentListBox.getSelectedValue();
        urlContent = urlContent.substring(urlContent.indexOf("=") + 2, urlContent.indexOf(","));
        int id = Integer.parseInt(urlContent);
        int index = -1;
        for(int count = 0; count < urlContentList.size(); count++)
        {
            if(urlContentList.get(count).id == id)
            index = count;
        }
        if(index < 0 || index == urlContentList.size() - 1)
        return;

        int downID = urlContentList.get(index + 1).id;
        int currentID = id;

        sql.executeUpdate(String.format("UPDATE `%s`.`URL_content` SET `id` = '%s' WHERE (`id` = '%s');", schema, "-1", downID));
        sql.executeUpdate(String.format("UPDATE `%s`.`URL_content` SET `id` = '%s' WHERE (`id` = '%s');", schema, downID, currentID));
        sql.executeUpdate(String.format("UPDATE `%s`.`URL_content` SET `id` = '%s' WHERE (`id` = '%s');", schema, currentID, "-1"));
        updateURLContentList();

        URLContentListBox.setSelectedIndex(index + 1);

        sql.closeConnection();
    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        // TODO add your handling code here:
        String urlContent = URLContentListBox.getSelectedValue();
        urlContent = urlContent.substring(urlContent.indexOf("=") + 2, urlContent.indexOf(","));
        int id = Integer.parseInt(urlContent);
        int index = -1;
        for(int count = 0; count < urlContentList.size(); count++)
        {
            if(urlContentList.get(count).id == id)
            index = count;
        }
        if(index <= 0)
        return;

        int upID = urlContentList.get(index - 1).id;
        int currentID = id;

        sql.executeUpdate(String.format("UPDATE `%s`.`URL_content` SET `id` = '%s' WHERE (`id` = '%s');", schema, "-1", upID));
        sql.executeUpdate(String.format("UPDATE `%s`.`URL_content` SET `id` = '%s' WHERE (`id` = '%s');", schema, upID, currentID));
        sql.executeUpdate(String.format("UPDATE `%s`.`URL_content` SET `id` = '%s' WHERE (`id` = '%s');", schema, currentID, "-1"));
        updateURLContentList();

        URLContentListBox.setSelectedIndex(index - 1);

        sql.closeConnection();
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void deleteURLContentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteURLContentButtonActionPerformed
        // TODO add your handling code here:
        String urlContent = URLContentListBox.getSelectedValue();
        urlContent = urlContent.substring(urlContent.indexOf("=") + 2, urlContent.indexOf(","));
        int id = Integer.parseInt(urlContent);
        sql.executeUpdate(String.format("DELETE FROM `%s`.`URL_content` WHERE (`id` = '%s');", schema, id));
        updateURLContentList();
        sql.closeConnection();
    }//GEN-LAST:event_deleteURLContentButtonActionPerformed

    private void newURLContentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newURLContentButtonActionPerformed
        // TODO add your handling code here:
        int id = getCurrentURLID();
        sql.executeUpdate(String.format("INSERT INTO `%s`.`URL_content` (`URL_id`, `content`) VALUES ('%s', '%s');", schema, id, "Hello world!"));
        updateURLContentList();
        sql.closeConnection();
    }//GEN-LAST:event_newURLContentButtonActionPerformed

    private void viewOrEditButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrEditButton1ActionPerformed
        // TODO add your handling code here:
        String url = URLTextBox.getText();
        getAllURL();
        for(int count = 0; count < urlContentList.size(); count++)
        {
            sql.executeUpdate(String.format("DELETE FROM `%s`.`URL_content` WHERE (`id` = '%s');", schema, urlContentList.get(count).id));
        }

        int id = getCurrentURLID();

        sql.executeUpdate(String.format("DELETE FROM `%s`.`URL` WHERE (`id` = '%s');", schema, id));

        getAllURL();
        updateURLList();
        updateURLContentList();

        sql.closeConnection();
    }//GEN-LAST:event_viewOrEditButton1ActionPerformed

    private void changeURLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeURLButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            String url = URLTextBox.getText();
            String name = nameTextBox.getText();
            int protected_resources = protectedCheckBox.isSelected() ? 1 : 0;
            String userGroup = userGroupTextBox.getText();
            String newURL = replaceURLTextBox.getText();
            int id = -1;

            if(newURL.charAt(0) != '/')
            return;

            getAllURL();

            for(int count = 0; count < urlList.size(); count++)
            {
                if(urlList.get(count).path.compareTo(newURL) == 0)
                return;
            }

            for(int count = 0; count < urlList.size(); count++)
            {
                if(urlList.get(count).path.compareTo(url) == 0)
                {
                    id = urlList.get(count).id;
                    break;
                }
            }

            sql.executeUpdate(String.format("UPDATE `%s`.`URL` SET `URL` = '%s', `name` = '%s', `protected` = '%s', `user_group` = '%s' WHERE (`id` = '%s');", schema, newURL, name, protected_resources, userGroup, id));

            getAllURL();
            updateURLList();

            sql.closeConnection();
        }
        catch(Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }//GEN-LAST:event_changeURLButtonActionPerformed

    private void newURLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newURLButtonActionPerformed
        try
        {
            // TODO add your handling code here:
            String url = URLTextBox.getText();
            String name = nameTextBox.getText();
            int protected_resources = protectedCheckBox.isSelected() ? 1 : 0;
            String userGroup = userGroupTextBox.getText();

            if(url.charAt(0) != '/')
            return;

            getAllURL();

            for(int count = 0; count < urlList.size(); count++)
            {
                if(urlList.get(count).path.compareTo(url) == 0)
                return;
            }

            sql.executeUpdate(String.format("INSERT INTO `%s`.`URL` (`URL`, `name`, `protected`, `user_group`) VALUES ('%s', '%s', '%s', '%s');", schema, url, name, protected_resources, userGroup));

            getAllURL();
            updateURLList();

            sql.closeConnection();
        }
        catch (Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }//GEN-LAST:event_newURLButtonActionPerformed

    private void viewOrEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrEditButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            String strURLContent = URLContentListBox.getSelectedValue().toString();
            strURLContent = strURLContent.substring(strURLContent.indexOf("=") + 2, strURLContent.indexOf(","));

            tempURLContentID = Integer.parseInt(strURLContent);

            viewOrEditTextArea.setText("");

            ResultSet rs = sql.executeQuery(String.format("SELECT * FROM %s.URL_content WHERE URL_content.id = %s;", schema, tempURLContentID));

            while(rs.next())
            viewOrEditTextArea.setText(rs.getString("content"));

            mainTabbedPane.setSelectedIndex(1);

            viewOrEditLabel.setText("URL_content_id = " + tempURLContentID);

            rs.close();

            sql.closeConnection();
        }
        catch(Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }//GEN-LAST:event_viewOrEditButtonActionPerformed

    private void URLTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_URLTextBoxKeyReleased
        // TODO add your handling code here:
        String url = URLTextBox.getText();
        updateURLContentList(url);
        sql.closeConnection();
    }//GEN-LAST:event_URLTextBoxKeyReleased

    private void updateURLPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateURLPageButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            getAllPreset();
            sql = new SQL(ip, port, username, password);

            getAllURL();
            updateURLList();

            sql.closeConnection();
        }
        catch(Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }//GEN-LAST:event_updateURLPageButtonActionPerformed

    private void URLListBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_URLListBoxMouseClicked
        // TODO add your handling code here:
        try
        {
            String url = URLListBox.getSelectedValue().toString();
            nameTextBox.setText(url.substring(url.indexOf("name = ") + 7, url.indexOf("->") - 1 ));
            url = url.substring(url.indexOf("protected"));

            if(url.substring(url.indexOf("protected = ") + 12, url.indexOf(",")).compareTo("true") == 0)
                protectedCheckBox.setSelected(true);
            else
                protectedCheckBox.setSelected(false);

            url = url.substring(url.indexOf("user_group"));
            userGroupTextBox.setText(url.substring("user_group = ".length() , url.indexOf(",")));

            url = url.substring(url.indexOf("->") + 3);
            
            updateURLContentList(url);
            URLTextBox.setText(url);

            sql.closeConnection();

            if(URLContentListBox.getModel().getSize() >= 1)
                URLContentListBox.setSelectedIndex(0);
        }
        catch(Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }//GEN-LAST:event_URLListBoxMouseClicked

    private void presetComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetComboBoxActionPerformed
        // TODO add your handling code here:
        int index = presetComboBox.getSelectedIndex() - 1;
        if(index < 0)
            return;

        ip = infoSer.list.get(index).ip;
        port = infoSer.list.get(index).port;
        username = infoSer.list.get(index).username;
        password = infoSer.list.get(index).password;
        schema = infoSer.list.get(index).schema;

        IPTextBox.setText(ip);
        PortTextBox.setText("" + port);
        UsernameTextBox.setText(username);
        PasswordTextBox.setText(password);
        SchemaTextBox.setText(schema);
    }//GEN-LAST:event_presetComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() 
            {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AutoSortButton;
    private javax.swing.JTextField IPTextBox;
    private javax.swing.JTextField PasswordTextBox;
    private javax.swing.JTextField PortTextBox;
    private javax.swing.JTextField SchemaTextBox;
    private javax.swing.JList<String> URLContentListBox;
    private javax.swing.JList<String> URLListBox;
    private javax.swing.JTextField URLTextBox;
    private javax.swing.JTextField UsernameTextBox;
    private javax.swing.JButton changeURLButton;
    private javax.swing.JTextArea debugTextArea;
    private javax.swing.JButton deletePresetButton;
    private javax.swing.JButton deleteURLContentButton;
    private javax.swing.JButton htmlViewButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JTextField nameTextBox;
    private javax.swing.JButton newURLButton;
    private javax.swing.JButton newURLContentButton;
    private javax.swing.JComboBox<String> presetComboBox;
    private javax.swing.JCheckBox protectedCheckBox;
    private javax.swing.JTextField replaceURLTextBox;
    private javax.swing.JButton savePresetButton;
    private javax.swing.JButton saveSettingButton;
    private javax.swing.JButton saveToSqlButton;
    private javax.swing.JButton testConnectionButton;
    private javax.swing.JButton updateURLPageButton;
    private javax.swing.JTextField userGroupTextBox;
    private javax.swing.JButton viewOrEditButton;
    private javax.swing.JButton viewOrEditButton1;
    private javax.swing.JLabel viewOrEditLabel;
    private javax.swing.JTextArea viewOrEditTextArea;
    // End of variables declaration//GEN-END:variables
    public void getAllPreset()
    {
        try
        {
            ip = IPTextBox.getText().trim();
            port = Integer.parseInt(PortTextBox.getText().trim());
            username = UsernameTextBox.getText().trim();
            password = PasswordTextBox.getText().trim();
            schema = SchemaTextBox.getText().trim();
        }
        catch(Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
        
    }
    
    public void updatePreset()
    {
        presetComboBox.removeAllItems();
        
//        DefaultComboBoxModel listModel = new DefaultComboBoxModel();
//        
//        listModel.addElement("Please select preset below ...");
//        
//        for(int count = 0; count < infoSer.list.size(); count++)
//            listModel.addElement(infoSer.list.get(count).toString());
//        
//        presetComboBox.setModel(listModel);
        
        presetComboBox.addItem("Please select preset below ...");
        for(int count = 0; count < infoSer.list.size(); count++)
            presetComboBox.addItem(count + 1 + ". " + infoSer.list.get(count).toString());
    }
    
    public int getCurrentURLID()
    {
        String url = URLTextBox.getText();
        getAllURL();
        int id = -1;
        for(int count = 0; count < urlList.size(); count++)
        {
            if(urlList.get(count).path.compareTo(url) == 0)
            {
                id = urlList.get(count).id;
            }
        }
        
        sql.closeConnection();
        
        return id;
    }
    
    public void getAllURL()
    {
        try(ResultSet rs = sql.executeQuery(String.format("SELECT * FROM %s.URL;", schema)))
        {
            urlList = new LinkedList<URL>();
            while(rs.next())
            {
                urlList.add(new URL(rs.getInt("id"), rs.getString("name"), rs.getString("URL"), rs.getBoolean("protected"), rs.getString("user_group")));
            }
            rs.close();
            
            sql.closeConnection();
        }
        catch(Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
        
    }
    
    public void updateURLList()
    {
        try
        {
            int currentSelectedIndex = URLListBox.getSelectedIndex();
            
            URLListBox.removeAll();
            URLContentListBox.removeAll();
        
            DefaultListModel listModel = new DefaultListModel();
            for(int count = 0; count < urlList.size(); count++)
                listModel.addElement(urlList.get(count).toString());

            URLListBox.setModel(listModel);
            
            if(currentSelectedIndex < 0)
                return;
            
            URLListBox.setSelectedIndex(currentSelectedIndex);
            
            sql.closeConnection();
        }
        catch(Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }
    public void updateURLContentList()
    {
        String url = URLTextBox.getText();
        updateURLContentList(url);
        sql.closeConnection();
    }
    public void updateURLContentList(String URL)
    {
        URLContentListBox.removeAll();
        
        urlContentList = new LinkedList<URLContent>();
        
        try
        {
            ResultSet rs = sql.executeQuery(String.format("select * from %s.URL_content join %s.URL where URL.URL = '%s' and URL.id = URL_content.URL_id", schema, schema, URL));
            DefaultListModel listModel = new DefaultListModel();
            String url;
            String content;
            
            while(rs.next())
            {
                url = rs.getString("URL");
                content = rs.getString("content");
                
                if(url.compareTo(URL) == 0)
                {
                    urlContentList.add(new URLContent(rs.getInt("id"), rs.getInt("URL_id"), content));
                }
            }
            
            for(int count = 0; count < urlContentList.size(); count++)
                listModel.addElement(urlContentList.get(count).toString());
        
            URLContentListBox.setModel(listModel);
            rs.close();
            
            sql.closeConnection();
        }
        catch(Exception ex)
        {
            printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
        }
    }
    
    public String getStackTrace(Exception ex)
    {
        String result = "";
        StackTraceElement[] stackTraces = ex.getStackTrace();
        for(int count = 0; count < stackTraces.length; count++)
        {
            result += stackTraces[count].toString() + "\n";
        }
        return result;
    }
    
    public void printDebug(String message)
    {
        sql.closeConnection();
        mainTabbedPane.setSelectedIndex(2);
        Date date = new Date();  
        debugTextArea.append(String.format("--------------------------%s------------------------\n", date));
        debugTextArea.append(message);
        debugTextArea.append("\n");
    }
    
    public void printDebug(Exception ex)
    {
        printDebug("message: " + ex.getMessage() + "\nstack trace: \n" + getStackTrace(ex));
    }
    
    public void autoShortURL()
    {
        urlList = new LinkedList<URL>();
        urlContentList = new LinkedList<URLContent>();
        
        try
        {
            ResultSet rs = sql.executeQuery(String.format("Select id, URL from %s.URL", schema));
            
            while(rs.next())
                urlList.add(new URL(rs.getInt("id"), rs.getString("URL")));
            
            rs.close();
            sql.closeConnection();
            
            rs = sql.executeQuery(String.format("Select id, URL_id from %s.URL_content", schema));
            
            while(rs.next())
                urlContentList.add(new URLContent(rs.getInt("id"), rs.getInt("URL_id"), "***"));
            
            rs.close();
            sql.closeConnection();
            
            ///////////////////////////////////////////////////////////////////////////////////////
            LinkedList<URLSet> list = new LinkedList<URLSet>();
            LinkedList<URLSet> listT;
            LinkedList<URLSet> sortedList = new LinkedList<URLSet>();
            for(int count = 0; count < urlList.size(); count++)
            {
                list.add(new URLSet(urlList.get(count)));
            }
            for(int count = 0; count < urlContentList.size(); count++)
            {
                addURLContentToSet(list, urlContentList.get(count));
            }

            int maxLevel = 1;
            for(int count = 0; count < list.size(); count++)
            {
                if(list.get(count).beforeSortedID > maxLevel)
                    maxLevel = list.get(count).beforeSortedID;
            }

            for(int level = 1; level <= maxLevel; level++)
            {
                listT = new LinkedList<URLSet>();

                //add each level to list T for sorting
                for(int count = 0; count < list.size(); count++)
                    if(list.get(count).urlLevel == level)
                        listT.add(list.get(count));

                while(!listT.isEmpty())
                {
                    sortedList.add(getSmallest(listT, level - 1));
                }
            }

            for(int count = 1; count <= sortedList.size(); count++)
                sortedList.get(count - 1).afterSortedID = count;

            //set all URL table id to it negative
            for(int count = 0; count < sortedList.size(); count++)
            {
                int currentID = sortedList.get(count).beforeSortedID;
                sql.executeUpdate(String.format("UPDATE `%s`.`URL` SET `id` = '%s' WHERE (`id` = '%s');", schema, currentID * -1, currentID));
                sortedList.get(count).beforeSortedID = currentID * -1;
            }

            for(int count = 0; count < sortedList.size(); count++)
            {
                int currentID = sortedList.get(count).beforeSortedID;
                int afterSortID = sortedList.get(count).afterSortedID;
                sql.executeUpdate(String.format("UPDATE `%s`.`URL` SET `id` = '%s' WHERE (`id` = '%s');", schema, afterSortID, currentID));
            }

            for(int count = 0; count < sortedList.size(); count++)
            {
                if(!sortedList.get(count).urlContentList.isEmpty())
                {
                    int urlContentListSize = sortedList.get(count).urlContentList.size();
                    for(int count1 = 0; count1 < urlContentListSize; count1++)
                    {
                        int currentID = sortedList.get(count).urlContentList.get(count1).id;
                        int afterSortID = sortedList.get(count).afterSortedID;
                        sql.executeUpdate(String.format("UPDATE `%s`.`URL_content` SET `URL_id` = '%s' WHERE (`id` = '%s');", schema, afterSortID, currentID));
                    }
                }
            }
            
            sql.executeUpdate(String.format("ALTER TABLE %s.URL AUTO_INCREMENT = %s", schema, sortedList.size() + 1));
            
        }
        catch(Exception ex)
        {
            printDebug(ex);
        }
    }
    
    public static URLSet getSmallest(LinkedList<URLSet> list, int level)
    {
        int index = 0;
        for(int count = 0; count < list.size(); count++)
        {
            if(list.get(count).paths[level].charAt(0) < list.get(index).paths[level].charAt(0))
                index = count;
        }
        
        URLSet set = list.get(index);
        list.remove(index);
        return set;
    }
    
    public static void addURLContentToSet(LinkedList<URLSet> urlList, URLContent urlContent)
    {
        int urlContentID = urlContent.URL_id;
        for(int count = 0; count < urlList.size(); count++)
        {
            int urlID = urlList.get(count).beforeSortedID;
            if(urlID == urlContentID)
            {
                urlList.get(count).urlContentList.add(urlContent);
                return;
            }
                
        }
    }
}
